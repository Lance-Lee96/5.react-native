*useReducer()
현재 상태와, 상태를 어떻게 업데이트할지를 정의한 함수를 통해 새로운 상태를 반환

*주요 개념
state: 현재 컴포넌트의 상태값
action: 상태를 어떻게 변경할지 나타내는 "명령"
reducer: 현재 상태와 액션을 받아서 새로운 상태를 반환하는 함수

*기본 문법
const [state,dispatch] = useReducer(redukcer,initialState);
 switch(action.type){
        case'Increment':
        return {count:state.count + 1};
        case'Decrement':
        return {count:state.count - 1};
   }

function reducer(state,action){

}

<Button onClick={() => dispatch({type:'Increment'})}>
<Button onClick={() => dispatch({type:'Decrement'})}> 

*언제 useReducer를 사용할까?
1. 상태가 여러개일 때 : useState를 사용해 각각의 상태를 관리하기 보다는 하나의  state객체로 묶어서 관리하는 것이 효율적이기 때문이다.

2. 복잡한 로직이 필요할 때 : 상태 변경에 따라 다양한 조건을 검토하고, 여러 단계를 거쳐서 상태를 변경해야 할 때

3. 상태 업데이트 로직을 컴포넌트 밖으로 분리하고 싶을 때
reducer 함수는 컴포넌트 외부에 둘 수도 있어서, 상태 관리 로직을 명확히 분리할 수 있다.


